λ> :t id
id :: a -> a
λ> let foo2 = make (10, 20) (\(i, j) -> fromChannel (i + j)) :: Image A RGB (Exp Int)
λ> let foo1 = make (10, 20) (\(i, j) -> fromChannel (i + j)) :: Image A RGB (Exp Int)
λ> compute' (disperse foo1)
Array (Z :. 3 :. 10 :. 20) [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28]
λ> compute' (foo1 + foo2)
Array (Z :. 3 :. 10 :. 20) [0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56]
λ> let foo1 = make (10, 20) (\(i, j) -> fromChannel (i + j)) :: Image R RGB (Exp Int)

<interactive>:772:70-72:
    Not in scope: type constructor or class ‘RGB’

<interactive>:772:75-77:
    Not in scope: type constructor or class ‘Exp’
λ> let foo1 = make (10, 20) (\(i, j) -> fromChannel (i + j)) :: Image R RGB Int
λ> let foo2 = make (10, 20) (\(i, j) -> fromChannel (i + j)) :: Image R RGB Int
λ> (disperse foo1)
<Image RGB: 10x20>
λ> let foo2 = make (10, 20) (\(i, j) -> fromChannel (i + j)) :: Image A RGB (Exp Int)
λ> indexCh foo Red (5, 6)

<interactive>:792:9-11:
    Not in scope: ‘foo’
    Perhaps you meant ‘foo2’ (line 791)
λ> indexCh foo2 Red (5, 6)
#2 ((generate
       (Z :. 10 :. 20)
       (\x0 -> let x1 = (indexHead (indexTail x0)) + (indexHead x0)
               in (x1,x1,x1)))
    !
    (Z :. 5 :. 6))
λ> run $ unit $ indexCh foo2 Red (5, 6)
Array (Z) [11]
λ> run $ unit $ indexCh foo2 Red (5, 6)
Array (Z) [11]
λ> singleton (PixelRGB 3 4 5)

<interactive>:796:12-19: Not in scope: data constructor ‘PixelRGB’
λ> singleton (PixelRGB 3 4 5)

<interactive>:798:12-19: Not in scope: data constructor ‘PixelRGB’
Cabal file changed: ba82aaa68102b294390db27effb8a9e8
Restarting process ...
Hello, Haskell!
If I break, you can:
  1. Restart:           M-x haskell-process-restart
  2. Configure logging: C-h v haskell-process-log (useful for debugging)
  3. General config:    M-x customize-mode
  4. Hide these tips:   C-h v haskell-process-show-debug-tips
src/Graphics/Image/Repa/Internal.hs:25:10-33: Warning: …
    No explicit implementation for
      ‘mapElt’, ‘zipWithElt’, ‘zipWithPx’, ‘compute’, and ‘computeM’
    In the instance declaration for ‘Array R cs e’
λ> singleton (PixelRGB 3 4 5)

<interactive>:7:1-26:
    No instance for (Array arr0 RGB e0) arising from a use of ‘print’
    The type variables ‘arr0’, ‘e0’ are ambiguous
    Note: there is a potential instance available:
      instance (Elt cs (Exp e)) => Array A cs (Exp e)
        -- Defined at /home/lehins/github/hip/hip/src/Graphics/Image/Accelerate/Internal.hs:27:10
    In a stmt of an interactive GHCi command: print it
λ> compute' $ singleton (PixelRGB 3 4 5)

<interactive>:8:1-37:
    No instance for (A.Elt (Plain e0)) arising from a use of ‘it’
    The type variable ‘e0’ is ambiguous
    Note: there are several potential instances:
      instance A.Elt () -- Defined in ‘Data.Array.Accelerate.Array.Sugar’
      instance (A.Elt a, A.Elt b) => A.Elt (a, b)
        -- Defined in ‘Data.Array.Accelerate.Array.Sugar’
      instance (A.Elt a, A.Elt b, A.Elt c) => A.Elt (a, b, c)
        -- Defined in ‘Data.Array.Accelerate.Array.Sugar’
      ...plus 38 others
    In the first argument of ‘print’, namely ‘it’
    In a stmt of an interactive GHCi command: print it
λ> compute' $ (singleton (PixelRGB 3 4 5) :: Image A RGB Int)

<interactive>:9:13-57:
    Couldn't match type ‘Int’ with ‘Exp e’
    Expected type: Image A RGB (Exp e)
      Actual type: Image A RGB Int
    Relevant bindings include
      it :: A.Array DIM3 e (bound at <interactive>:9:1)
    In the second argument of ‘($)’, namely
      ‘(singleton (PixelRGB 3 4 5) :: Image A RGB Int)’
    In the expression:
      compute' $ (singleton (PixelRGB 3 4 5) :: Image A RGB Int)
    In an equation for ‘it’:
        it = compute' $ (singleton (PixelRGB 3 4 5) :: Image A RGB Int)
λ> compute' $ (singleton (PixelRGB 3 4 5) :: Image A RGB (Exp Int))
*** Exception: /home/lehins/github/hip/hip/src/Graphics/Image/Accelerate/Internal.hs:109:1-35: Non-exhaustive patterns in function compute'

λ> compute' $ (singleton (PixelRGB 3 4 5) :: Image A RGB (Exp Int))
*** Exception: Prelude.Eq.== applied to EDSL types: use (==*) instead
λ> compute' $ (singleton (PixelRGB 3 4 5) :: Image A RGB (Exp Int))
Array (Z :. 3) [3,4,5]
λ> compute' (singleton (PixelRGB 3 4 5) :: Image A RGB (Exp Int))
Array (Z :. 3) [3,4,5]
λ> let foo2 = make (10, 20) (\(i, j) -> fromChannel (i * j)) :: Image A RGB (Exp Int)

<interactive>:99:70-72:
    Not in scope: type constructor or class ‘RGB’
src/Graphics/Image/ColorSpace/RGB.hs:100:10-24: Warning: …
    No explicit implementation for
      ‘getCsCh’
    In the instance declaration for ‘ColorSpace RGBA’
src/Graphics/Image/Accelerate/Internal.hs:27:10-47: Warning: …
    No explicit implementation for
      ‘mapCh’, ‘compute’, ‘computeM’, and ‘iif’
    In the instance declaration for ‘Array A cs (Exp e)’
λ> let foo2 = make (10, 20) (\(i, j) -> fromChannel (i * j)) :: Image A RGB (Exp Int)
λ> compute' foo2
Array (Z :. 10 :. 20) [(0,0,0),(0,0,0),(0,0,0),(0,0,0),(0,0,0),(0,0,0),(0,0,0),(0,0,0),(0,0,0),(0,0,0),(0,0,0),(0,0,0),(0,0,0),(0,0,0),(0,0,0),(0,0,0),(0,0,0),(0,0,0),(0,0,0),(0,0,0),(0,0,0),(1,1,1),(2,2,2),(3,3,3),(4,4,4),(5,5,5),(6,6,6),(7,7,7),(8,8,8),(9,9,9),(10,10,10),(11,11,11),(12,12,12),(13,13,13),(14,14,14),(15,15,15),(16,16,16),(17,17,17),(18,18,18),(19,19,19),(0,0,0),(2,2,2),(4,4,4),(6,6,6),(8,8,8),(10,10,10),(12,12,12),(14,14,14),(16,16,16),(18,18,18),(20,20,20),(22,22,22),(24,24,24),(26,26,26),(28,28,28),(30,30,30),(32,32,32),(34,34,34),(36,36,36),(38,38,38),(0,0,0),(3,3,3),(6,6,6),(9,9,9),(12,12,12),(15,15,15),(18,18,18),(21,21,21),(24,24,24),(27,27,27),(30,30,30),(33,33,33),(36,36,36),(39,39,39),(42,42,42),(45,45,45),(48,48,48),(51,51,51),(54,54,54),(57,57,57),(0,0,0),(4,4,4),(8,8,8),(12,12,12),(16,16,16),(20,20,20),(24,24,24),(28,28,28),(32,32,32),(36,36,36),(40,40,40),(44,44,44),(48,48,48),(52,52,52),(56,56,56),(60,60,60),(64,64,64),(68,68,68),(72,72,72),(76,76,76),(0,0,0),(5,5,5),(10,10,10),(15,15,15),(20,20,20),(25,25,25),(30,30,30),(35,35,35),(40,40,40),(45,45,45),(50,50,50),(55,55,55),(60,60,60),(65,65,65),(70,70,70),(75,75,75),(80,80,80),(85,85,85),(90,90,90),(95,95,95),(0,0,0),(6,6,6),(12,12,12),(18,18,18),(24,24,24),(30,30,30),(36,36,36),(42,42,42),(48,48,48),(54,54,54),(60,60,60),(66,66,66),(72,72,72),(78,78,78),(84,84,84),(90,90,90),(96,96,96),(102,102,102),(108,108,108),(114,114,114),(0,0,0),(7,7,7),(14,14,14),(21,21,21),(28,28,28),(35,35,35),(42,42,42),(49,49,49),(56,56,56),(63,63,63),(70,70,70),(77,77,77),(84,84,84),(91,91,91),(98,98,98),(105,105,105),(112,112,112),(119,119,119),(126,126,126),(133,133,133),(0,0,0),(8,8,8),(16,16,16),(24,24,24),(32,32,32),(40,40,40),(48,48,48),(56,56,56),(64,64,64),(72,72,72),(80,80,80),(88,88,88),(96,96,96),(104,104,104),(112,112,112),(120,120,120),(128,128,128),(136,136,136),(144,144,144),(152,152,152),(0,0,0),(9,9,9),(18,18,18),(27,27,27),(36,36,36),(45,45,45),(54,54,54),(63,63,63),(72,72,72),(81,81,81),(90,90,90),(99,99,99),(108,108,108),(117,117,117),(126,126,126),(135,135,135),(144,144,144),(153,153,153),(162,162,162),(171,171,171)]
λ> let foo2 = make (10, 20) (\(i, j) -> fromChannel (if i == 2 then j else i)) :: Image A RGB (Exp Int)